#include <DAVE.h>
#include "CAN_Config.h"
#include "CAN_Router.h"

void CAN_HandleReceivedMessage(Message_t message)
{
	uint8_t from_node_id = (message.id >> {{ message_id_offsets.from_node_id }}U) & 0xFFU;
	uint8_t to_node_id = (message.id >> {{ message_id_offsets.to_node_id }}U) & 0xFFU;

	{% for message in messages -%}
	{% if message.type == 'rx' %}
	{%- if loop.index > 1 -%} else {% endif -%}
	if ((message.id & CAN_MESSAGE_{{ message.name.upper() }}_MASK) == CAN_MESSAGE_{{ message.name.upper() }}_MASK) {
		{{ message.name }}_t s;

		// Parse {{ message.name }} to struct
		{%- for signal in message.signals %}

		s.{{ signal.name }} = 0U;
		{%- for word_offset in signal.get_words(8) %}
		s.{{ signal.name }} += ((message.data[{{ word_offset.offset }}U]) & {{ word_offset.mask }}U){% if loop.index > 1 %} << {{ (loop.index - 1) * 8 }}U{% endif %};
		{%- endfor %}

		{%- endfor %}

		Handle_{{ message.name }}_Received(s, from_node_id, to_node_id);
	}
	{% endif -%}
	{%- endfor %}
}

{% for message in messages -%}
{% if message.type == 'tx' %}
void Send_{{ message.name }}({{ message.name }}_t *s, uint32_t to_node)
{
	uint8_t data[8] = { 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U };

	{% for signal in message.signals -%}
	{% for word_offset in signal.get_words(8) -%}
	data[{{ word_offset.offset }}U] |= ((uint8_t) (s->{{ signal.name }} >> {{ (loop.index - 1) * 8 }}U) << {{ word_offset.bit_offset }}U) & {{ word_offset.mask }}U;
	{% endfor %}
	{% endfor -%}

	CAN_NODE_MO_UpdateData(CAN_NODE_0.lmobj_ptr[CAN_MESSAGE_{{ message.name.upper() }}_INDEX], (uint8_t *) data);
	CAN_NODE_MO_Transmit(CAN_NODE_0.lmobj_ptr[CAN_MESSAGE_{{ message.name.upper() }}_INDEX]);
}
{% endif -%}
{%- endfor %}
